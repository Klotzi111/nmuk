plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '2.1.1'
	id 'org.cadixdev.licenser' version '0.6.1'
}

ext {
	jdk_version = 8
	
	klotzi111_localDeps = "true".equals(System.getenv("klotzi111_localDeps"))
}

sourceCompatibility = jdk_version
targetCompatibility = jdk_version

archivesBaseName = project.archives_base_name
version = "$mod_version+mc$minecraft_version"
group = project.maven_group

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

repositories {
	mavenLocal()
	maven {
		name "Siphalor's Maven"
		url "https://maven.siphalor.de"
	}
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		url "https://jitpack.io"
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// TransformerInterceptor
	include(modApi(klotzi111_localDeps ? "de.klotzi111:TransformerInterceptor:1+" : "com.github.Klotzi111:TransformerInterceptor:main-SNAPSHOT"))
	
	// FabricMultiVersionHelper
	include(modApi(klotzi111_localDeps ? "de.klotzi111:FabricMultiVersionHelper:1+" : "com.github.Klotzi111:FabricMultiVersionHelper:main-SNAPSHOT"))
	
	// Controlling
	modCompileOnly("curse.maven:Controlling-250398:3822621")

	// Amecs API
	testmodImplementation(klotzi111_localDeps ? "de.siphalor:amecsapi-${project.target_minecraft_major_version}:1+" : "com.github.Klotzi111:amecs-api:${project.target_minecraft_major_version}-SNAPSHOT") {
		exclude(group: "*")
	}
	
	testmodRuntimeOnly("com.github.astei:lazydfu:master-SNAPSHOT")

	// we need those old api versions because newer versions require java 16 and that is not available on older minecraft versions
	// these old fabric apis are required because we want to support down to minecraft 1.14
	def fabric_deps = [
			"fabric-api-base"		   : "0.1.2+de26dc4942",
			"fabric-key-binding-api-v1": "1.0.2+4ea4772942",
			"fabric-resource-loader-v0": "0.1.5+4ea4772942"
	]
	for (dep in fabric_deps.entrySet()) {
		include(modApi("net.fabricmc.fabric-api:" + dep.getKey() + ":" + dep.getValue()))
	}

	testmodImplementation sourceSets.main.output
}

license {
	header = project.file('LICENSE_HEADER')

	include '**/*.java'
}

processResources {
	inputs.property "version", version
	inputs.property "compiledWithMinecraftSourceVersion", minecraft_version

	afterEvaluate {
		from(sourceSets.main.resources.srcDirs) {
			include "fabric.mod.json"
			expand "version": version
			duplicatesStrategy DuplicatesStrategy.INCLUDE
		}
		from(sourceSets.main.resources.srcDirs) {
			include "mappings/compiledWithMinecraftSourceVersion.txt"
			expand "compiledWithMinecraftSourceVersion": minecraft_version
			duplicatesStrategy DuplicatesStrategy.INCLUDE
		}
	}
}

tasks.withType(JavaCompile) {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	options.encoding = "UTF-8"
	options.release = jdk_version
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = "${project.archives_base_name}-${project.target_minecraft_major_version}"

			from components.java
			java.withSourcesJar()
		}
	}

	// select the repositories you want to publish to
	repositories {
		if (project.hasProperty("siphalorMavenUser")) {
			maven {
				name = "Siphalor"
				url = "https://maven.siphalor.de/upload.php"
				credentials {
					username = siphalorMavenUser
					password = siphalorMavenPassword
				}
			}
		}
	}
}

// Mod sites

def getChangelog() {
	def commits = 'git log -20 --format=oneline'.execute().text.readLines()
	def versionCommit = null
	for (commit in commits) {
		if (commit.contains('Version')) {
			versionCommit = commit.split(' ')[0]
			break
		}
	}
	if (versionCommit == null) {
		return """## Version ${project.mod_version}

No changelog found!"""
	}
	return ('git log -1 --format=format:##%x20%s%n%n%b%nRelease%x20by%x20%an ' + versionCommit).execute().text.trim()
}

task uploadToModSites {
	dependsOn build
	group = "upload"
}

if (project.hasProperty("curseforgeToken")) {
	curseforge {
		apiKey project.curseforgeToken
		project {
			id = "438172"
			releaseType = project.mod_release
			changelogType = "markdown"
			changelog = project.getChangelog()
			addGameVersion("Fabric")
			for (version in ((String) project.mod_mc_versions).split(";")) {
				addGameVersion(version)
			}
			relations {
				embeddedLibrary "fabric-api"
				optionalDependency "amecs"
			}
			mainArtifact(remapJar) {
				displayName = "[${project.mod_mc_version_specifier}] ${project.mod_version}"
			}
		}
	}
	uploadToModSites.finalizedBy(tasks.curseforge)
}

modrinth {
	if (project.hasProperty("modrinthToken")) {
		token = project.modrinthToken
		uploadToModSites.finalizedBy(tasks.modrinth)
	}

	projectId = "YCcdA1Lp"
	versionName = "[${project.mod_mc_version_specifier}] ${project.mod_version}"
	versionType = project.mod_release
	changelog = project.getChangelog()
	uploadFile = remapJar
	gameVersions = project.mod_mc_versions.split(";") as List<String>
	loaders = ["fabric"]
}
tasks.modrinth.group = "upload"
